<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [5_USBH_MSC_CH376S\5_USBH_MSC_CH376S.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 5_USBH_MSC_CH376S\5_USBH_MSC_CH376S.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Nov 15 19:41:24 2019
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ad]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2c]">CAN1_RX0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2b]">CAN1_TX_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[51]">CAN2_RX0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[52]">CAN2_RX1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[53]">CAN2_SCE_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[50]">CAN2_TX_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[49]">DMA2_Channel1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4e]">ETH_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[4f]">ETH_WKUP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[54]">OTG_FS_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[42]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[44]">SPI3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[55]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f107xc.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[43]">TIM5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[47]">TIM6_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[48]">TIM7_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[45]">UART4_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[46]">UART5_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f107xc.o(.text) referenced from startup_stm32f107xc.o(RESET)
 <LI><a href="#[5a]">Ch376msc::~Ch376msc()</a> from ch376msc.o(i._ZN8Ch376mscD1Ev) referenced from ch376msc.o(.constdata__ZTV8Ch376msc)
 <LI><a href="#[5a]">Ch376msc::~Ch376msc()</a> from ch376msc.o(i._ZN8Ch376mscD1Ev) referenced from myapp.o(i.__sti___9_MyApp_cpp_fputc)
 <LI><a href="#[5c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f107xc.o(.text)
 <LI><a href="#[5b]">__sti___9_MyApp_cpp_fputc</a> from myapp.o(i.__sti___9_MyApp_cpp_fputc) referenced from myapp.o(.init_array)
 <LI><a href="#[58]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[57]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[59]">fputc</a> from myapp.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[60]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[61]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[62]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[64]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[66]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[13e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[78]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[13f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[140]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[141]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[142]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[143]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[147]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[148]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[149]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[70]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[150]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[151]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[152]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[153]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[155]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[156]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[158]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[159]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[15a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[15b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[75]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[15c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[79]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MyApp &rArr; setup() &rArr; Ch376msc::init() &rArr; Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[15d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f107xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f107xc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[160]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>

<P><STRONG><a name="[82]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[85]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[86]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[84]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[65]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[88]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MyApp_cpp_fputc
</UL>

<P><STRONG><a name="[12a]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[ab]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[129]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[8e]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setFileName(const char*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileName()
</UL>

<P><STRONG><a name="[166]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[8d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[8c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[92]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[87]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[167]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[83]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9d]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[67]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[81]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[72]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[9f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[168]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a2]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[69]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[a4]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[94]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6f]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[74]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[aa]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[b1]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[bc]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[16d]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[bb]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[16e]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[76]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a1]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[a8]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a6]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[af]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[a9]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[16f]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a7]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a3]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[133]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[170]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[173]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[ba]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[b0]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[bd]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[b4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[b3]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[b5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b7]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[174]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[c0]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[175]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c2]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[c1]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[c3]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[c4]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[96]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[97]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[c5]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART2_UART_Init()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI3_Init()
</UL>

<P><STRONG><a name="[c6]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>

<P><STRONG><a name="[da]"></a>HAL_GPIO_Init</STRONG> (Thumb, 766 bytes, Stack size 36 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[10f]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
</UL>

<P><STRONG><a name="[e7]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>

<P><STRONG><a name="[e8]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[d3]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1378 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig &rArr; [local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[d8]"></a>HAL_SPI_Init</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI3_Init()
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>

<P><STRONG><a name="[cc]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART2_UART_Init()
</UL>

<P><STRONG><a name="[df]"></a>HAL_UART_MspInit</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_Receive</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; [local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; [local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>MyApp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, myapp.o(i.MyApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MyApp &rArr; setup() &rArr; Ch376msc::init() &rArr; Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f107xc.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>delayMicroseconds(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comm.o(i._Z17delayMicrosecondsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayMicroseconds(int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>

<P><STRONG><a name="[ea]"></a>SystemClock_Config()</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>loop()</STRONG> (Thumb, 848 bytes, Stack size 16 bytes, myapp.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = loop() &rArr; Ch376msc::writeFile(char*, unsigned char) &rArr; Ch376msc::openFile() &rArr; Ch376msc::dirInfoRead() &rArr; Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readFile(char*, unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setSecond(unsigned short)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMinute(unsigned short)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getSecond()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getMinute()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMonth(unsigned short)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getMonth()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setYear(unsigned short)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setHour(unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getYear()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getHour()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setDay(unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getDay()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getTotalSectors()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFreeSectors()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSystem()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setFileName(const char*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSize()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileName()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>

<P><STRONG><a name="[e5]"></a>setup()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, myapp.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = setup() &rArr; Ch376msc::init() &rArr; Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>

<P><STRONG><a name="[109]"></a>millis()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, comm.o(i._Z6millisv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = millis()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
</UL>

<P><STRONG><a name="[ec]"></a>Ch376msc::checkDrive()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc10checkDriveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[102]"></a>Ch376msc::deleteFile()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376msc10deleteFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Ch376msc::deleteFile() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[117]"></a>Ch376msc::fileCreate()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc10fileCreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::fileCreate() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[118]"></a>Ch376msc::fileEnumGo()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc10fileEnumGoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::fileEnumGo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
</UL>

<P><STRONG><a name="[f1]"></a>Ch376msc::moveCursor(unsigned)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ch376msc.o(i._ZN8Ch376msc10moveCursorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Ch376msc::moveCursor(unsigned) &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[11a]"></a>Ch376msc::pingDevice()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc10pingDeviceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ch376msc::pingDevice() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
</UL>

<P><STRONG><a name="[111]"></a>Ch376msc::rdDiskInfo()</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ch376msc.o(i._ZN8Ch376msc10rdDiskInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
</UL>

<P><STRONG><a name="[11d]"></a>Ch376msc::dirInfoRead()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc11dirInfoReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Ch376msc::dirInfoRead() &rArr; Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
</UL>

<P><STRONG><a name="[101]"></a>Ch376msc::dirInfoSave()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc11dirInfoSaveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Ch376msc::dirInfoSave() &rArr; Ch376msc::writeFatData() &rArr; Ch376msc::sendCommand(unsigned char) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f4]"></a>Ch376msc::getFileName()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, setget.o(i._ZN8Ch376msc11getFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ch376msc::getFileName() &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[103]"></a>Ch376msc::getFileSize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc11getFileSizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[120]"></a>Ch376msc::reqByteRead(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc11reqByteReadEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::reqByteRead(unsigned char) &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>Ch376msc::sendCommand(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc11sendCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Ch376msc::sendCommand(unsigned char) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
</UL>

<P><STRONG><a name="[ed]"></a>Ch376msc::setFileName(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setget.o(i._ZN8Ch376msc11setFileNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ch376msc::setFileName(const char*) &rArr; Ch376msc::sendFilename() &rArr; Ch376msc::sendCommand(unsigned char) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[11b]"></a>Ch376msc::spiReadData()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, comm.o(i._ZN8Ch376msc11spiReadDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
</UL>

<P><STRONG><a name="[110]"></a>Ch376msc::getInterrupt()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, comm.o(i._ZN8Ch376msc12getInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
</UL>

<P><STRONG><a name="[123]"></a>Ch376msc::reqByteWrite(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc12reqByteWriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::reqByteWrite(unsigned char) &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[121]"></a>Ch376msc::sendFilename()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376msc12sendFilenameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ch376msc::sendFilename() &rArr; Ch376msc::sendCommand(unsigned char) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::print(const char*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setFileName(const char*)
</UL>

<P><STRONG><a name="[11f]"></a>Ch376msc::writeFatData()</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, ch376msc.o(i._ZN8Ch376msc12writeFatDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Ch376msc::writeFatData() &rArr; Ch376msc::sendCommand(unsigned char) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
</UL>

<P><STRONG><a name="[12e]"></a>Ch376msc::constructDate(unsigned short, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, setget.o(i._ZN8Ch376msc13constructDateEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMonth(unsigned short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setYear(unsigned short)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setDay(unsigned short)
</UL>

<P><STRONG><a name="[12f]"></a>Ch376msc::constructTime(unsigned short, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, setget.o(i._ZN8Ch376msc13constructTimeEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setSecond(unsigned short)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMinute(unsigned short)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setHour(unsigned short)
</UL>

<P><STRONG><a name="[107]"></a>Ch376msc::getFileSystem()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc13getFileSystemEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[104]"></a>Ch376msc::getFileSizeStr()</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, setget.o(i._ZN8Ch376msc14getFileSizeStrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Ch376msc::getFileSizeStr() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f2]"></a>Ch376msc::getFreeSectors()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc14getFreeSectorsEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[12b]"></a>Ch376msc::readDataToBuff(char*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ch376msc.o(i._ZN8Ch376msc14readDataToBuffEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ch376msc::readDataToBuff(char*) &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[113]"></a>Ch376msc::readSerDataUSB()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comm.o(i._ZN8Ch376msc14readSerDataUSBEv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
</UL>

<P><STRONG><a name="[115]"></a>Ch376msc::spiEndTransfer()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, comm.o(i._ZN8Ch376msc14spiEndTransferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ch376msc::spiEndTransfer()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
</UL>

<P><STRONG><a name="[106]"></a>Ch376msc::getTotalSectors()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc15getTotalSectorsEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[114]"></a>Ch376msc::spiBeginTransfer()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comm.o(i._ZN8Ch376msc16spiBeginTransferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ch376msc::spiBeginTransfer() &rArr; Ch376msc::spiReady() &rArr; delayMicroseconds(int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
</UL>

<P><STRONG><a name="[116]"></a>Ch376msc::spiWaitInterrupt()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, comm.o(i._ZN8Ch376msc16spiWaitInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getInterrupt()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdDiskInfo()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::deleteFile()
</UL>

<P><STRONG><a name="[12c]"></a>Ch376msc::writeDataFromBuff(char*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ch376msc.o(i._ZN8Ch376msc17writeDataFromBuffEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Ch376msc::writeDataFromBuff(char*) &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>Ch376msc::init()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376msc4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Ch376msc::init() &rArr; Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[124]"></a>Ch376msc::print(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, comm.o(i._ZN8Ch376msc5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Ch376msc::print(const char*) &rArr; Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
</UL>

<P><STRONG><a name="[119]"></a>Ch376msc::write(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, comm.o(i._ZN8Ch376msc5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ch376msc::write(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReady()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setMode(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFatData()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::pingDevice()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::print(const char*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoSave()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::moveCursor(unsigned)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
</UL>

<P><STRONG><a name="[f7]"></a>Ch376msc::getDay()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc6getDayEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fd]"></a>Ch376msc::setDay(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc6setDayEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setDay(unsigned short) &rArr; Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f8]"></a>Ch376msc::getHour()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc7getHourEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f5]"></a>Ch376msc::getYear()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc7getYearEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[105]"></a>Ch376msc::listDir()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc7listDirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Ch376msc::listDir() &rArr; Ch376msc::openFile() &rArr; Ch376msc::dirInfoRead() &rArr; Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::rdFatInfo()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileEnumGo()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::closeFile()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendFilename()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::setFileName(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fe]"></a>Ch376msc::setHour(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc7setHourEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setHour(unsigned short) &rArr; Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[12d]"></a>Ch376msc::setMode(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc7setModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::checkDrive()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
</UL>

<P><STRONG><a name="[fb]"></a>Ch376msc::setYear(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc7setYearEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setYear(unsigned short) &rArr; Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[130]"></a>Ch376msc::byteRdGo()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc8byteRdGoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::byteRdGo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[131]"></a>Ch376msc::byteWrGo()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc8byteWrGoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::byteWrGo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
</UL>

<P><STRONG><a name="[f6]"></a>Ch376msc::getMonth()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc8getMonthEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[ee]"></a>Ch376msc::openFile()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376msc8openFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Ch376msc::openFile() &rArr; Ch376msc::dirInfoRead() &rArr; Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeFile(char*, unsigned char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f3]"></a>Ch376msc::readFile(char*, unsigned char)</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ch376msc.o(i._ZN8Ch376msc8readFileEPch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Ch376msc::readFile(char*, unsigned char) &rArr; Ch376msc::byteRdGo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteRdGo()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readDataToBuff(char*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteRead(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fc]"></a>Ch376msc::setMonth(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc8setMonthEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setMonth(unsigned short) &rArr; Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructDate(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[122]"></a>Ch376msc::spiReady()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comm.o(i._ZN8Ch376msc8spiReadyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ch376msc::spiReady() &rArr; delayMicroseconds(int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::init()
</UL>

<P><STRONG><a name="[f0]"></a>Ch376msc::closeFile()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ch376msc.o(i._ZN8Ch376msc9closeFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::closeFile() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::write(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiWaitInterrupt()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[f9]"></a>Ch376msc::getMinute()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc9getMinuteEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[fa]"></a>Ch376msc::getSecond()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setget.o(i._ZN8Ch376msc9getSecondEv))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[11e]"></a>Ch376msc::rdFatInfo()</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ch376msc.o(i._ZN8Ch376msc9rdFatInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::sendCommand(unsigned char)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiBeginTransfer()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiEndTransfer()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::readSerDataUSB()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::spiReadData()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::dirInfoRead()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::listDir()
</UL>

<P><STRONG><a name="[ff]"></a>Ch376msc::setMinute(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc9setMinuteEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setMinute(unsigned short) &rArr; Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[100]"></a>Ch376msc::setSecond(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, setget.o(i._ZN8Ch376msc9setSecondEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ch376msc::setSecond(unsigned short) &rArr; Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::constructTime(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[ef]"></a>Ch376msc::writeFile(char*, unsigned char)</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, ch376msc.o(i._ZN8Ch376msc9writeFileEPch))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Ch376msc::writeFile(char*, unsigned char) &rArr; Ch376msc::openFile() &rArr; Ch376msc::dirInfoRead() &rArr; Ch376msc::rdFatInfo() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::byteWrGo()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::writeDataFromBuff(char*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::reqByteWrite(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::fileCreate()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::openFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[132]"></a>Ch376msc::Ch376msc(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376mscC1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ch376msc::Ch376msc(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MyApp_cpp_fputc
</UL>

<P><STRONG><a name="[177]"></a>Ch376msc::Ch376msc__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ch376msc.o(i._ZN8Ch376mscC1Ehhh), UNUSED)

<P><STRONG><a name="[5a]"></a>Ch376msc::~Ch376msc()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch376msc.o(i._ZN8Ch376mscD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> myapp.o(i.__sti___9_MyApp_cpp_fputc)
<LI> ch376msc.o(.constdata__ZTV8Ch376msc)
</UL>
<P><STRONG><a name="[178]"></a>Ch376msc::~Ch376msc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ch376msc.o(i._ZN8Ch376mscD1Ev), UNUSED)

<P><STRONG><a name="[9a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[89]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[59]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, myapp.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; [local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = main &rArr; MyApp &rArr; setup() &rArr; Ch376msc::init() &rArr; Ch376msc::setMode(unsigned char) &rArr; Ch376msc::checkDrive() &rArr; Ch376msc::rdDiskInfo() &rArr; Ch376msc::spiWaitInterrupt() &rArr; Ch376msc::getInterrupt() &rArr; Ch376msc::spiReadData() &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART2_UART_Init()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI3_Init()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyApp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[134]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[137]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[179]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[136]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[138]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::getFileSizeStr()
</UL>

<P><STRONG><a name="[139]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[13a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[135]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[63]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__sti___9_MyApp_cpp_fputc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, myapp.o(i.__sti___9_MyApp_cpp_fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___9_MyApp_cpp_fputc &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376msc::Ch376msc(unsigned char, unsigned char, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myapp.o(.init_array)
</UL>
<P><STRONG><a name="[10a]"></a>[local to main_c]::MX_GPIO_Init()</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, main.o(i._ZN23_INTERNAL_6_main_c_main12MX_GPIO_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = [local to main_c]::MX_GPIO_Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>[local to main_c]::MX_SPI3_Init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i._ZN23_INTERNAL_6_main_c_main12MX_SPI3_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to main_c]::MX_SPI3_Init() &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>[local to main_c]::MX_USART2_UART_Init()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._ZN23_INTERNAL_6_main_c_main19MX_USART2_UART_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to main_c]::MX_USART2_UART_Init() &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>[local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_spi_c_5e7b22bd22SPI_EndRxTxTransactionEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[10e]"></a>[local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_spi_c_5e7b22bd29SPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f1xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f1xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>[local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(i._ZN41_INTERNAL_19_stm32f1xx_hal_rcc_c_b7071a4b9RCC_DelayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f1xx_hal_rcc_c]::RCC_Delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[cf]"></a>[local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f1xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f1xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ce]"></a>[local to stm32f1xx_hal_cortex_c]::__NVIC_GetPriorityGrouping()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f1xx_hal_cortex_c_2992dbc026__NVIC_GetPriorityGroupingEv))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e0]"></a>[local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f14UART_SetConfigEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>[local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f1xx_hal_uart_c_d497114f27UART_WaitOnFlagUntilTimeoutEP20__UART_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f1xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[93]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[58]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
